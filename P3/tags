!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BITINPUTSTREAM_HPP	BitInputStream.hpp	2;"	d
BITOUTPUTSTREAM_HPP	BitOutputStream.hpp	2;"	d
BitInputStream	BitInputStream.hpp	/^  BitInputStream(istream& s) : in(s), buf(0), bufi(8) { }$/;"	f	class:BitInputStream
BitInputStream	BitInputStream.hpp	/^class BitInputStream {$/;"	c
BitOutputStream	BitOutputStream.hpp	/^  BitOutputStream(ostream& s) : out(s), buf(0), bufi(0) { }$/;"	f	class:BitOutputStream
BitOutputStream	BitOutputStream.hpp	/^class BitOutputStream {$/;"	c
COMP_EXE	Makefile	/^COMP_EXE	= compress$/;"	m
COMP_OBJS	Makefile	/^COMP_OBJS	= ${OBJECTS} compress.o$/;"	m
COMP_SRCS	Makefile	/^COMP_SRCS	= ${SOURCES} compress.cpp$/;"	m
GCC	Makefile	/^GCC		= g++$/;"	m
GCC_FLAGS	Makefile	/^GCC_FLAGS	= -c -g ${WARNINGS} ${OPTIMIZATION} ${STDCPP}$/;"	m
HCNODE_HPP	HCNode.hpp	2;"	d
HCNode	HCNode.hpp	/^  HCNode(int count,$/;"	f	class:HCNode
HCNode	HCNode.hpp	/^class HCNode {$/;"	c
HCNodePtrComp	HCTree.hpp	/^class HCNodePtrComp {$/;"	c
HCTREE_HPP	HCTree.hpp	2;"	d
HCTree	HCTree.hpp	/^    explicit HCTree() : root(0) {$/;"	f	class:HCTree
HCTree	HCTree.hpp	/^class HCTree {$/;"	c
LD_FLAGS	Makefile	/^LD_FLAGS	= ${WARNINGS} ${OPTIMIZATION} ${STDCPP}$/;"	m
OBJECTS	Makefile	/^OBJECTS		= BitInputStream.o BitOutputStream.o HCNode.o HCTree.o$/;"	m
OPTIMIZATION	Makefile	/^  OPTIMIZATION	= -O0$/;"	m
OPTIMIZATION	Makefile	/^OPTIMIZATION	= -O2$/;"	m
SOURCES	Makefile	/^SOURCES		= BitInputStream.cpp BitOutputStream.cpp HCNode.cpp HCTree.cpp$/;"	m
STDCPP	Makefile	/^STDCPP		= -std=c++11$/;"	m
UNCOMP_EXE	Makefile	/^UNCOMP_EXE	= uncompress$/;"	m
UNCOMP_OBJS	Makefile	/^UNCOMP_OBJS	= ${OBJECTS} uncompress.o$/;"	m
UNCOMP_SRCS	Makefile	/^UNCOMP_SRCS	= ${SOURCES} uncompress.cpp$/;"	m
WARNINGS	Makefile	/^WARNINGS	= -W -Wall -pedantic$/;"	m
buf	BitInputStream.hpp	/^    char buf;     \/\/ the buffer of bits$/;"	m	class:BitInputStream
buf	BitOutputStream.hpp	/^  char buf;     \/\/ the buffer of bits$/;"	m	class:BitOutputStream
bufi	BitInputStream.hpp	/^    int bufi;     \/\/ the bit buffer index$/;"	m	class:BitInputStream
bufi	BitOutputStream.hpp	/^  int bufi;     \/\/ the bit buffer index$/;"	m	class:BitOutputStream
build	HCTree.cpp	/^void HCTree:: build(const vector<int>& freqs){$/;"	f	class:HCTree
byte	HCNode.hpp	/^typedef unsigned char byte;$/;"	t
c0	HCNode.hpp	/^  HCNode* c0;  \/\/ pointer to '0' child$/;"	m	class:HCNode
c1	HCNode.hpp	/^  HCNode* c1;  \/\/ pointer to '1' child$/;"	m	class:HCNode
comp	HCNode.cpp	/^bool HCNode::comp(HCNode* one, HCNode* other){$/;"	f	class:HCNode
count	HCNode.hpp	/^  int count;$/;"	m	class:HCNode
decode	HCTree.cpp	/^int HCTree::decode(BitInputStream& in) const{$/;"	f	class:HCTree
deleteNode	HCTree.cpp	/^void HCTree:: deleteNode(HCNode* n){$/;"	f	class:HCTree
encode	HCTree.cpp	/^void HCTree::encode(byte symbol, BitOutputStream& out) const{$/;"	f	class:HCTree
flush	BitOutputStream.cpp	/^void BitOutputStream:: flush(){$/;"	f	class:BitOutputStream
in	BitInputStream.hpp	/^    istream& in;  \/\/ the istream to delegate to$/;"	m	class:BitInputStream
inputstream	compress.cpp	/^BitInputStream *inputstream;$/;"	v
leaves	HCTree.hpp	/^    vector<HCNode*> leaves;$/;"	m	class:HCTree
main	compress.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	uncompress.cpp	/^int main(int argc, char* argv[]){$/;"	f
memblock	compress.cpp	/^char *memblock;$/;"	v
operator ()	HCTree.hpp	/^    bool operator()(HCNode*& lhs, HCNode*& rhs) const {$/;"	f	class:HCNodePtrComp
operator <	HCNode.cpp	/^bool HCNode:: operator<(const HCNode& other){$/;"	f	class:HCNode
operator <<	HCNode.hpp	/^ostream& operator<<(ostream& stm, const HCNode& n) {$/;"	f
out	BitOutputStream.hpp	/^  ostream& out;  \/\/ the ostream to delegate to$/;"	m	class:BitOutputStream
p	HCNode.hpp	/^  HCNode* p;   \/\/ pointer to parent$/;"	m	class:HCNode
readBit	BitInputStream.cpp	/^int BitInputStream:: readBit(){$/;"	f	class:BitInputStream
readByte	BitInputStream.cpp	/^int BitInputStream:: readByte(){$/;"	f	class:BitInputStream
readInt	BitInputStream.cpp	/^int BitInputStream:: readInt(){$/;"	f	class:BitInputStream
root	HCTree.hpp	/^    HCNode* root;$/;"	m	class:HCTree
symbol	HCNode.hpp	/^  byte symbol; \/\/ byte in the file we're keeping track of$/;"	m	class:HCNode
writeBit	BitOutputStream.cpp	/^void BitOutputStream:: writeBit(int bit){$/;"	f	class:BitOutputStream
writeByte	BitOutputStream.cpp	/^void BitOutputStream:: writeByte(int b){$/;"	f	class:BitOutputStream
writeInt	BitOutputStream.cpp	/^void BitOutputStream:: writeInt(int i){$/;"	f	class:BitOutputStream
~HCTree	HCTree.cpp	/^HCTree::~HCTree(){ deleteNode(this->root);}$/;"	f	class:HCTree
