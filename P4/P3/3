#include "HCTree.hpp"
#include <vector>
#include <iostream>



HCTree::~HCTree() 
{ 
  HCNode* x = getRoot();

  if(x==0)
  {
    return;
  }
  else
  {
   delete x->c0;
   delete x->c1;
   delete x;
  }
}

void HCTree::encodeHeader(const vector<int>& freqs, 
    BitOutputStream& out,int x) const
{
  

//  out.writeByte(x);
  for(int i=0; i<256;i++)
  {
  // if(freqs[i]!=0)
  // {
//    out.writeByte((char)i);
//    out.writeInt(freqs[i]);
   out.writeInt(freqs[i]);
  // }
  }
}

void HCTree::encode(byte symbol, BitOutputStream& out) const
{
    HCNode* node = this->leaves[symbol];
    while(node!=this->root)
    {
      if(node->p->c1==node)
      {
         out.writeBit(1);
      }
      if(node->p->c0==node)
      {
          out.writeBit(0);
      }
      node=node->p;
    } 
  }

int HCTree::decode(BitInputStream& in) const
{
  return 0;
}

HCNode* HCTree::getRoot() const
{
  return this->root;
}

void HCTree::build(const vector<int>& freqs)
{
  std::priority_queue<HCNode*,vector<HCNode*>,HCNodePtrComp> pqueue;
  // Loop through and only add in non-zero frequences into temp
  int j=0;
  for(int i=0;i<=256;i++)
  {
   
    if(freqs[i]!=0)
    {
      leaves[i] = new HCNode(freqs[i],i,0,0,0);
      pqueue.push(leaves[i]);
      j++;
    }
  }
  HCNode* x=0;
  HCNode* y=0;
  HCNode* parent=0;
 while(pqueue.size()>1)
 {
   x=pqueue.top();
   pqueue.pop();
   y=pqueue.top();
   pqueue.pop();
   parent = new HCNode(x->count+y->count,0,x,y,0);
   x->p=parent;
   y->p=parent;
   pqueue.push(parent);
 }
 root=pqueue.top();
}


