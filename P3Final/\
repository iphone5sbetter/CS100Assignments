#include "BitInputStream.hpp"

int BitInputStream::readBit()
{
  // returns the fill character.
  // in.get(); will get the next character to read.


  if(this->in.eof())
  {
    return -1;
  }
  return in.get();

  if(bufi==8)
  {
    buf=in.get();
    bufi=0;
    buf=0;
  }
  int x = buf&(1>>bufi);
  // x = (buf >> (7-bufi) & 1; MAYBE??????????
  bufi++;
  return x;
}

int BitInputStream::readByte()
{
  if(this->in.eof())
  {
    return -1;
  }
  return in.get();
}

int BitInputStream::readInt()
{
if(this->in.eof())
  {
    cout<<"ERROR"<<endl;
    return -1;
  }

//  return in.get();
/*
  unsigned int count=0;
  for (int i=0; i<4;i++) {
  if (in.eof()) return -1;
  //in.read((char*) count, 4);
  count = (count << 8) & in.get();

  }
  cout << count <<endl;
  return count;
  */
  int i;
  in.get(reinterpret_cast<char*>(&i),sizeof(int));
  return i;
}
